openapi: 3.1.0
info:
  title: Waste Compactor API
  version: 1.0.0
  description: >
    Open and vendor-neutral HTTPS/JSON API between a self-service waste compactor and a backend system.
    The direction of the API is compactorâ†’backend, where compactor acts as a client and backend acts as a server.
    Security model is based on mutual TLS (mTLS) where both sides prove their identity by using X.509 certificates.
  contact:
    name: NN
  x-api-id: "urn:example:waste-compactor-api"
  x-audience: "external-partner"
servers:
  - url: https://api.example.com
    description: Production
  - url: https://sandbox.api.example.com
    description: Sandbox

tags:
  - name: health
  - name: info
  - name: status
  - name: events
  - name: alarms
  - name: entitlements

security:
  - mutualTLS: []

paths:
  /health:
    get:
      tags: [health]
      summary: API health check
      operationId: get_health
      description: >
        Checks that the API in the backend is responding.
        Infra monitoring service can call this operation in order to check that service is alive.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '503':
          description: Service is unavailable or degraded
          content: 
            application/json: 
              schema:
                $ref: '#/components/schemas/Health'
        '500':
          $ref: '#/components/responses/ServerError'

  /compactors/{compactor_id}/info:
    post:
      tags: [info]
      summary: Send compactor information to backend
      operationId: post_info
      description: >
        Send compactor information e.g. identification, model and version to backend.
        Compactor sends this message after SW restart or at least once in 24h. 
      parameters:
        - $ref: '#/components/parameters/CompactorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Info'
      responses:
        '204':
          description: Compactor information has been updated in the backend; no response body.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /compactors/{compactor_id}/events:
    post:
      tags: [events]
      summary: Send compactor event
      operationId: post_event
      description: Send event to backend when compactor state changes. 
      parameters:
        - $ref: '#/components/parameters/CompactorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '204':
          description: Event accepted and processed successfully; no response body.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /compactors/{compactor_id}/status:
    post:
      tags: [status]
      summary: Send compactor status to backend.
      operationId: post_status
      description: >
        Send compactor status to backend.
        Compactor must call this operation repeatedly in 15 minute itervals.
        Backend must set connection status DISCONNECTED if no new request has been received for 16 minutes,
        otherwise connection status is CONNECTED.  
      parameters:
        - $ref: '#/components/parameters/CompactorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
      responses:
        '204':
          description: Status accepted and processed successfully; no response body.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /compactors/{compactor_id}/alarm-events:
    post:
      tags: [alarms]
      summary: Send compactor alarm event (activated or cleared)
      operationId: post_alarms
      description: Send compactor alarm event (activated or cleared) to backend.
      parameters:
        - $ref: '#/components/parameters/CompactorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alarm'
      responses:
        '204':
          description: Alarm event accepted and processed successfully; no response body.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /compactors/{compactor_id}/entitlement-checks:
    post:
      tags: [entitlements]
      summary: Check customer entitlements
      operationId: check_entitlements
      description: Check entitlements for the given credential. 
      parameters:
        - $ref: '#/components/parameters/CompactorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
      responses:
        '200':
          description: Entitlement was evaluated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementCheckResponse'        
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    mutualTLS:
      type: mutualTLS
      description: Client and server authentication (X.509) via mutual TLS.

  parameters:
    CompactorId:
      name: compactor_id
      in: path
      required: true
      description: Unique compactor identifier
      schema:
        type: string
        examples: [WC-12345]

  responses:
    BadRequest:
      description: Bad request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    Unauthorized:
      description: mTLS authentication failed (or missing)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    Forbidden:
      description: Authenticated but not authorized to perform the operation
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    ServerError:
      description: Server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'

  schemas:
    Health:
      type: object
      description: API health indicator
      properties:
        status:
          type: string
          enum: [OK, DEGRADED, ERROR]
          examples: [OK]
        version:
          type: string
          examples: ["1.0.0"]
      required: [status, version]

    Info:
      type: object
      description: >
        Compactor information.
        (needs to be studied what information is made available)
      properties:
        compactor_id:
          type: string
          description: Unique compactor identifier
          examples: ["WC-12345"]
        vendor: 
          type: string
          description: Compactor manufacturer
          examples: ["EcoPress"] 
        model: 
          type: string
          description: Compactor model name
          examples: ["EMC mini"]
        hw_version:
          type: string
          description: Hardware version
          examples: ["1.2"]
        sw_version:
          type: string
          description: Software version
          examples: ["1.1"]
      required: [compactor_id, sw_version]

    Credential:
      type: object
      description: Customer credential scanned/entered at device
      properties:
        type:
          type: string
          enum: [PIN, QR, RFID]
        value:
          type: string
          examples: ["1234567890"]
      required: [type, value]

    EntitlementCheckResponse:
      type: object
      description: >
        Response to entitlements check request. 
        Defines allowed operations for the end customer. 
      properties:
        locale: 
          type: string
          description: >
            IETF BCP47 language tag to use for UI localization (e.g., "fi-FI", "sv-SE", "en-GB").
            Use lowercase language + uppercase region.
          examples: ["fi-FI"]
        items:
          type: array
          items: { $ref: '#/components/schemas/EntitlementDecision' }
        count:
          type: integer
          examples: [1]
      required: [items]

    EntitlementDecision:
      type: object
      description: Description of an entitlement.
      properties:
        action:
          type: string
          description: Entitled action
          enum: [UNLOCK_HATCH]
        allowed:
          type: boolean
          description: true if action is allowed, false otherwise
          examples: [false]
        reason:
          type: string
          description: >
            Human-readable reason text if not allowed.
            This text is already localized in the backend based on customer profile.
          examples: ["KÃ¤yttÃ¶perehdytys suorittamatta"]
        valid_until:
          type: string
          format: date-time
          description: When the entitlement expires; RFC 3339 timestamp
      required: [action, allowed]

    Status:
      type: object
      description: Compactor status message
      properties:
        timestamp:
          type: string
          format: date-time
          description: RFC 3339 timestamp when samples were taken
        compactor_id:
          type: string
          description: Unique compactor identifier
          examples: ["WC-12345"]
        measurements:
          type: array
          description: List of measurements (telemetry)
          items:
            $ref: '#/components/schemas/Measurement'
        measurements_count:
          type: integer
          description: Count of measurements
          examples: [1]
        active_alarms:
          type: array       
          description: List of active alarms 
          items:
            $ref: '#/components/schemas/ActiveAlarm'
        active_alarms_count:
          type: integer
          description: Count of active alarms
          examples: [1]
      required: [timestamp, compactor_id, measurements, active_alarms]

    Measurement:
      type: object
      description: A single measurement
      properties:
        name:
          type: string
          description: Measurement name
          examples: ["temperature"]
        value:
          type: number
          description: Measurement value
          examples: [-8.2]
        unit:
          type: string
          description: Measurement SI unit
          examples: ["Â°C"]
        extras:
          type: object
          description: Additional information
          additionalProperties: true
      required: [name, value]

    ActiveAlarm:
      type: object
      description: An alarm that is currently active in the compactor
      properties:
        timestamp:
          type: string
          format: date-time
          description: Time when alarm became active; RFC 3339 timestamp
        code:
          type: string
          description: >
            Machine-specific or standardized code.
            Can be used as a key to localize description text.
          examples: ["AL_1234"]
        description:
          type: string
          description: Alarm event description in plain text; not localized
          examples: ["Hydraulic pump failed"]
        severity:
          type: string
          enum: [CRITICAL, HIGH, MEDIUM, LOW]
      required: [timestamp, code, severity]

    Event:
      type: object
      description: An event indicating state change in compactor
      properties:
        timestamp:
          type: string
          format: date-time
          description: RFC 3339 timestamp
        compactor_id:
          type: string
          description: Unique compactor identifier
          examples: ["WC-12345"]
        event_id:
          type: string
          description: Unique event identifier
          examples: ["dc65a2b4-8f0b-486f-94ff-861382a3b23a"]
        code:
          type: string
          description: >
            Machine-specific or standardized code.
            Can be used as a key to localize description text.
          examples: ["E-1234"]
        description:
          type: string
          description: Event description in plain text; not localized
          examples: ["Compression started"]
        details:
          type: object
          description: Additional information
          additionalProperties: true
      required: [timestamp, compactor_id, event_id, code]

    Alarm:
      type: object
      description: An alarm event indicating start or end of abnormal situation in compactor
      properties:
        timestamp:
          type: string
          format: date-time
          description: RFC 3339 timestamp
        compactor_id:
          type: string
          description: Unique compactor identifier
          examples: ["WC-12345"]
        alarm_event_id:
          type: string
          description: Stable id to correlate activation/clear.
          examples: ["cb825031-7ee6-411a-941b-f9a13aadb181"]
        alarm_type:
          type: string
          enum: [ACTIVATED, CLEARED]
        code:
          type: string
          description: >
            Machine-specific or standardized code.
            Can be used as a key to localize description text.
          examples: ["AL_1234"]
        description:
          type: string
          description: Alarm event description in plain text; not localized
          examples: ["Hydraulic pump failed"]
        severity:
          type: string
          enum: [CRITICAL, HIGH, MEDIUM, LOW]
        details:
          type: object
          description: Additional information
          additionalProperties: true
      required: [timestamp, compactor_id, alarm_event_id, alarm_type, code]

    Problem:
      type: object
      description: RFC 7807 Problem Details
      properties:
        type:
          type: string
          format: uri
          examples: ["https://api.example.com/problems/bad-request"]
        title:
          type: string
          examples: ["Bad Request"]
        status:
          type: integer
          examples: [400]
        detail:
          type: string
          examples: ["The 'value' field is required."]
        instance:
          type: string
          format: uri
          examples: ["https://api.example.com/requests/123e4567-e89b-12d3-a456-426614174000"]
      required: [title, status]